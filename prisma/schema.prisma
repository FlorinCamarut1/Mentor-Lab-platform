enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CV {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String?
  pdfHostedUrl String
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profileUrl   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("CV")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  email       String?   @unique
  image       String?
  password    String?
  phoneNumber String?
  gitHubUrl   String?
  facebookUrl String?
  linkedlnUrl String?
  role        UserRole  @default(STUDENT)
  accounts    Account[]

  CV              CV[]
  AcceptedStudent AcceptedStudent?

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  notifications Notification[]

  messages Message[]
}

model InviteToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token   String
  expires DateTime

  @@unique([id, token])
  @@map("verificationtokens")
}

model JoinRequest {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId          String   @db.ObjectId
  status             String   @default("PENDING")
  teacherId          String
  expires            DateTime
  createdAt          DateTime @default(now())
  projectName        String
  projectDescription String
}

model TeacherAcceptedStudents {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  teacherId               String
  currentNumberOfStudents Int               @default(0)
  maxNumberOfStudents     Int               @default(3)
  students                AcceptedStudent[]
}

model AcceptedStudent {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  teamId             String                  @db.ObjectId
  teacherId          String
  studentId          String                  @unique @db.ObjectId
  createdAt          DateTime                @default(now())
  projectName        String
  projectDescription String
  student            TeacherAcceptedStudents @relation(fields: [teamId], references: [id], onDelete: Cascade)
  studentData        User                    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Notification {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  body                String
  notificationType    String
  notifyeeId          String   @db.ObjectId
  createdAt           DateTime @default(now())
  notificatorId       String?
  notificatorUsername String?
  targetId            String?

  user User @relation(fields: [notifyeeId], references: [id], onDelete: Cascade)
}

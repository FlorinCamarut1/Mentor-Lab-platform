enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CV {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String?
  pdfHostedUrl String
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("CV")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String?   @unique
  image    String?
  password String?
  role     UserRole  @default(STUDENT)
  accounts Account[]
  sessions Session[]
  CV       CV[]
}

model InviteToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token   String
  expires DateTime

  @@unique([id, token])
  @@map("verificationtokens")
}
